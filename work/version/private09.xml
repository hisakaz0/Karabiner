<?xml version="1.0"?>
<root>
	<item>
		<name>Private</name>
		<item>
			<name>HHKB Keybind</name>
			<item>
				<name>HHKB HOME Key</name>
				<appendix>fn + k is Home</appendix>
				<identifier>private.fn_j_to_home</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::K,
					ModifierFlag::FN,
					KeyCode::HOME
				</autogen>
			</item>

			<item>
				<name>HHKB END Key</name>
				<appendix>fn + , is End</appendix>
				<identifier>private.fn_,_to_end</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::COMMA,
					ModifierFlag::FN,
					KeyCode::END
				</autogen>
			</item>

			<item>
				<name>HHKB PAGEUP Key</name>
				<appendix>fn + l is PageUp</appendix>
				<identifier>private.fn_l_to_pgup</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::L,
					ModifierFlag::FN,
					KeyCode::PAGEUP
				</autogen>
			</item>

			<item>
				<name>HHKB PAGEDOWN Key</name>
				<appendix>fn + . is PageDown</appendix>
				<identifier>private.fn_._to_pgdown</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::DOT,
					ModifierFlag::FN,
					KeyCode::PAGEDOWN
				</autogen>
			</item
			>

			<item>
				<name>HHKB UP Arrow</name>
				<appendix>fn + ; is Up Arrow</appendix>
				<identifier>private.fn_[_to_up</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::BRACKET_LEFT,
					ModifierFlag::FN,
					KeyCode::CURSOR_UP
				</autogen>
			</item>

			<item>
				<name>HHKB DOWN Arrow</name>
				<appendix>fn + / is Down Arrow</appendix>
				<identifier>private.fn_/_to_down</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::SLASH,
					ModifierFlag::FN,
					KeyCode::CURSOR_DOWN
				</autogen>
			</item>

			<item>
				<name>HHKB LEFT Arrow</name>
				<appendix>fn + ; is Left Arrow</appendix>
				<identifier>private.fn_;_to_left</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::SEMICOLON,
					ModifierFlag::FN,
					KeyCode::CURSOR_LEFT
				</autogen>
			</item>

			<item>
				<name>HHKB RIGHT Arrow</name>
				<appendix>fn + ' is Right Arrow</appendix>
				<identifier>private.fn_'_to_right</identifier>
				<autogen>
					__KeyToKey__ 
					KeyCode::QUOTE,
					ModifierFlag::FN,
					KeyCode::CURSOR_RIGHT
				</autogen>
			</item>

			<item>
				<name>HHKB CAPSLOCK</name>
				<appendix>fn + tab is CAPSLOCK</appendix>
				<identifier>private.fn_tab_to_capslock</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::TAB,
					ModifierFlag::FN,
					KeyCode::CAPSLOCK
				</autogen>
			</item>

			<item>
				<name>CAPS LOCK TO FN</name>
				<appendix>ctrl is fn.</appendix>
				<appendix>duplicate fn key</appendix>
				<identifier>private.capslock_to_fn</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::CAPSLOCK,
					ModifierFlag::CAPSLOCK | ModifierFlag::NONE,
					KeyCode::FN
				</autogen>
			</item>
		</item>


		<item>
			<name>Chrome for Linux and Windows</name>
			<item>
				<name>Web Search</name>
				<appendix>command + k is option + command + f</appendix>
				<identifier>private.cmd.k.to.cmt.cmd.opt.l</identifier>
				<only>Chrome</only>
				<autogen>
					__KeyToKey__
					KeyCode::K, ModifierFlag::COMMAND_L,
					KeyCode::F, ModifierFlag::COMMAND_L | ModifierFlag::OPTION_R
				</autogen>
			</item>

			<item>
				<name>History</name>
				<appendix>command + h is command + y</appendix>
				<identifier>private.cmd.h.to.cmd.y</identifier>
				<only>Chrome</only>
				<autogen>
					__KeyToKey__
					KeyCode::H, ModifierFlag::COMMAND_L,
					KeyCode::Y, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<appdef>
				<appname>Chrome</appname>
				<equal>com.google.Chrome</equal>
			</appdef>
		</item>

		<item>
			<name>Terminal</name>
			<item>
				<name>Swap Command + space to Control space</name>
				<identifier>private.cmd.space.to.ctrl.space</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::SPACE, ModifierFlag::COMMAND_L,
					KeyCode::SPACE, ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + C and CMD + C</name>
				<identifier>private.swap.ctrl.c.to.cmd.c</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::C, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::C, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::C, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::C, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + V and CMD + V</name>
				<identifier>private.swap.ctrl.v.to.cmd.v</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::V, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::V, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::V, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::V, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + S and CMD + S</name>
				<identifier>private.swap.ctrl.s.to.cmd.s</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::S, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::S, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::S, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::S, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + D and CMD + D</name>
				<identifier>private.swap.ctrl.d.to.cmd.d</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::D, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::D, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::D, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::D, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + N and CMD + N</name>
				<identifier>private.swap.ctrl.n.to.cmd.n</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::N, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::N, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::N, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::N, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + R and CMD + R</name>
				<identifier>private.swap.ctrl.r.to.cmd.r</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::R, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::R, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::R, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::R, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Swap Ctrl + K and CMD + K</name>
				<identifier>private.swap.ctrl.k.to.cmd.k</identifier>
				<only>iTerm2</only>
				<autogen>
					__KeyToKey__
					KeyCode::K, ModifierFlag::COMMAND_L | ModifierFlag::NONE,
					KeyCode::K, ModifierFlag::CONTROL_L
				</autogen>
				<autogen>
					__KeyToKey__
					KeyCode::K, ModifierFlag::CONTROL_L | ModifierFlag::NONE,
					KeyCode::K, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<appdef>
				<appname>iTerm2</appname>
				<equal>com.googlecode.iterm2</equal>
			</appdef>
		</item>

		<item>
			<name>Finder</name>
			<item>
				<name>Go Back</name>
				<appendix>opt + h is cmd + [</appendix>
				<identifier>private.opt.h.to.cmd.[</identifier>
				<only>Finder</only>
				<autogen>
					__KeyToKey__
					KeyCode::H, ModifierFlag::OPTION_L,
					KeyCode::BRACKET_LEFT, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Go Forward</name>
				<appendix>opt + l is cmd + ]</appendix>
				<identifier>private.opt.l.to.cmd.]</identifier>
				<only>Finder</only>
				<autogen>
					__KeyToKey__
					KeyCode::L, ModifierFlag::OPTION_L,
					KeyCode::BRACKET_RIGHT, ModifierFlag::COMMAND_L
				</autogen>
			</item>

			<item>
				<name>Up Arrow</name>
				<appendix>opt + k is Up arrow</appendix>
				<identifier>private.opt.k.to.up.arrow</identifier>
				<only>Finder</only>
				<autogen>
					__KeyToKey__
					KeyCode::K, ModifierFlag::OPTION_L,
					KeyCode::CURSOR_UP
				</autogen>
			</item>

			<item>
				<name>Down Arrow</name>
				<appendix>opt + j is Down arrow</appendix>
				<identifier>private.opt.j.to.down.arrow</identifier>
				<only>Finder</only>
				<autogen>
					__KeyToKey__
					KeyCode::J, ModifierFlag::OPTION_L,
					KeyCode::CURSOR_DOWN
				</autogen>
			</item>

			<appdef>
				<appname>Finder</appname>
				<equal>com.apple.finder</equal>
			</appdef>
		</item>
	</item>

</root>
